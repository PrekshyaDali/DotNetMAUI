<?xml version="1.0" encoding="utf-8" ?>
<ContentPage
    x:Class="MauiApp1.Views.ValidationPageDemo"
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:Validate="clr-namespace:MauiApp1.Models"
    xmlns:converter="clr-namespace:MauiApp1.Models"
    xmlns:local="clr-namespace:MauiApp1.ViewModels"
    xmlns:mct="http://schemas.microsoft.com/dotnet/2022/maui/toolkit"
    Title="ValidationPageDemo">
    <ContentPage.Resources>
        <Style x:Key="InvalidEntryStyle" TargetType="Entry">
            <Setter Property="TextColor" Value="Red" />
        </Style>
        <Style x:Key="ValidEntryStyle" TargetType="Entry">
            <Setter Property="TextColor" Value="Green" />
        </Style>
        <ResourceDictionary>
            <converter:EmailValidationConverter x:Key="EmailValidationConverter" />
        </ResourceDictionary>
    </ContentPage.Resources>
    <ContentPage.BindingContext>
        <local:ValidationViewModel />
    </ContentPage.BindingContext>

    <StackLayout Padding="20">

        <Border>
            <Entry x:Name="Name">
                <!--  we have another flags such as validateonunfocused  -->
                <Entry.Behaviors>
                    <mct:RequiredStringValidationBehavior
                        Flags="ValidateOnValueChanged"
                        InvalidStyle="{StaticResource InvalidEntryStyle}"
                        RequiredString="MAGIC ANSWER"
                        ValidStyle="{StaticResource ValidEntryStyle}" />
                </Entry.Behaviors>
            </Entry>
        </Border>
        <Label
            x:Name="NameError"
            IsVisible="False"
            Text="This field is required"
            TextColor="red">
            <Label.Triggers>
                <DataTrigger
                    Binding="{Binding Source={x:Reference Name}, Path=Text.Length, Mode=TwoWay}"
                    TargetType="Label"
                    Value="0">
                    <Setter Property="IsVisible" Value="True" />
                </DataTrigger>
            </Label.Triggers>
        </Label>

        <Border>
            <Entry x:Name="Email">
                <!--  we have another flags such as validateonunfocused  -->
                <Entry.Behaviors>
                    <mct:EmailValidationBehavior
                        x:Name="EmailValidationBehavior"
                        Flags="ValidateOnValueChanged"
                        InvalidStyle="{StaticResource InvalidEntryStyle}"
                        ValidStyle="{StaticResource ValidEntryStyle}" />
                </Entry.Behaviors>
            </Entry>
        </Border>
        <Label
            x:Name="EmailError"
            IsVisible="False"
            Text="This field is required"
            TextColor="red">
            <Label.Triggers>
                <DataTrigger
                    Binding="{Binding Source={x:Reference Email}, Path=Text.Length, Mode=TwoWay}"
                    TargetType="Label"
                    Value="0">
                    <Setter Property="IsVisible" Value="True" />
                </DataTrigger>
            </Label.Triggers>
        </Label>


        <Frame>
            <Entry x:Name="EmailEntry" Placeholder="Enter Email" />
        </Frame>
        <Label
            IsVisible="{Binding Source={x:Reference EmailEntry}, Path=Text, Converter={StaticResource EmailValidationConverter}}"
            Text="This email is not valid"
            TextColor="red" />


        <!--<StackLayout Padding="20">
            <Entry x:Name="EmailEntryTwo" Placeholder="Enter email">
                <Entry.Triggers>
        -->
        <!--  Event Trigger for Focused event  -->
        <!--
                    <EventTrigger Event="Focused">
                        <Validate:ValidateEmailAction InvalidEmailLabel="{Binding Source={x:Reference InvalidEmailLabel}}" />
                    </EventTrigger>
        -->
        <!--  Event Trigger for Unfocused event  -->
        <!--
                    <EventTrigger Event="Unfocused">
                        <Validate:ValidateEmailAction InvalidEmailLabel="{Binding Source={x:Reference InvalidEmailLabel}}" />
                    </EventTrigger>
                </Entry.Triggers>
            </Entry>

            <Label
                x:Name="InvalidEmailLabel"
                IsVisible="False"
                Text="Invalid Email"
                TextColor="Red" />
        </StackLayout>-->



        <!--  this is using event trigger  -->
        <StackLayout Padding="20">
            <!--  Entry for email input  -->
            <Frame>
                <Entry x:Name="EmailEntryTwo" Placeholder="Enter email">
                    <Entry.Triggers>
                        <!--  Trigger for when the Entry is focused  -->
                        <EventTrigger Event="TextChanged">
                            <Validate:ValidateEmailAction x:Name="EmailFocusAction" />
                        </EventTrigger>
                        <!--  Trigger for when the Entry loses focus  -->
                        <EventTrigger Event="Unfocused">
                            <Validate:ValidateEmailAction x:Name="EmailUnfocusAction" />
                        </EventTrigger>
                    </Entry.Triggers>
                </Entry>
            </Frame>

            <!--  Label to display invalid email message  -->
            <Label
                x:Name="InvalidEmailLabel"
                IsVisible="False"
                Text="Invalid Email"
                TextColor="Red" />
        </StackLayout>
    </StackLayout>
</ContentPage>
